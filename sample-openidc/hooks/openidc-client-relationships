#!/bin/bash -ex
. hooks/common

function joined() {
    juju-log "openidc-client-relation-joined on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
    R_URI=$(config-get oidc_redirect_uri);
    if [ -z "$R_URI" ]; then
        juju-log "Redirect URI need to be provied";
        exit 1;
    fi
    if [[ "$R_URI" =~ ^http.* ]]; then
        REDIRECT_URI="$R_URI";
    else
        REDIRECT_URI="https://$(unit-get public-address)/secret";
    fi

    juju-log "REDIRECT_URI:$REDIRECT_URI";
    relation-set redirect_uri="$REDIRECT_URI";
    CLIENT_ID=$(config-get oidc_client_id);
    if [ ! -z "$(echo $JUJU_REMOTE_UNIT | grep openam)" ]; then
        CLIENT_ID="OIDCAgent";
    else
        CLIENT_ID=$(config-get oidc_client_id);
    fi
   relation-set client_id="$CLIENT_ID";
}

#oidc_client_id:
#oidc_client_secret:
#oidc_scope:
#oidc_client_name:
#oidc_request_uri:
#oidc_redirect_uri:

function changed() {
        juju-log "openidc-client-relation-changed on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";

        METADATAURL=$(relation-get metadataURL);
        if  [ -z "$METADATAURL" ]; then
            return;
        fi
        # Lets go...
        service apache2 stop;

        HOSTNAME_PUBLIC=$(unit-get public-address);

        # Optional fields
        CLIENT_ID=$(config-get oidc_client_id);
        CLIENT_SECRET=$(config-get oidc_client_secret);
        CLIENT_NAME=$(config-get oidc_client_name);
        SCOPE=$(config-get oidc_scope);
        REQUEST_URI=$(config-get oidc_request_uri);
        R_URI=$(config-get oidc_redirect_uri);
        if [[ "$R_URI" =~ ^http.* ]]; then
            REDIRECT_URI="$R_URI";
        else
            REDIRECT_URI="https://$(unit-get public-address)/secret";
        fi

cat << EOF > $OIDC_CONF_FILE;
<VirtualHost *:443>
SSLEngine on
SSLCertificateFile $SSL_CERT_FILE
SSLCertificateKeyFile $SSL_KEY_FILE

ServerName $HOSTNAME_PUBLIC

ErrorLog /var/log/apache2/oidc-error_log
CustomLog /var/log/apache2/oidc-access_log common
DocumentRoot $DOCROOT

LogLevel trace8
OIDCCookiePath /oidc/
OIDCSSLValidateServer Off
OIDCOAuthSSLValidateServer Off
OIDCCryptoPassphrase password2
EOF

if [ ! -z "$(echo $JUJU_REMOTE_UNIT | grep salesforce)" ]; then
echo "$REDIRECT_URI?logout=https://login.salesforce.com" > /var/www/oidc/oidc_logout.txt;

# Only 'openid' can currently be used. Salesforce gives you all user profile claims in the openid scope.
SCOPE="openid";

cat << EOF >> $OIDC_CONF_FILE;

OIDCScope "$SCOPE"
OIDCProviderMetadataURL $METADATAURL
OIDCClientID $CLIENT_ID
OIDCClientSecret $CLIENT_SECRET
OIDCRedirectURI $REDIRECT_URI
OIDCClientName $CLIENT_NAME
OIDCCryptoPassphrase password2

EOF
fi
#
# Using explicite endpoints
#
if [ ! -z "$(echo $JUJU_REMOTE_UNIT | grep openam)" ]; then
# Special case for OpenAM as a OIDC provider end EndSession is broken
# Also need to use profile to get user claims
OPENAM_URL="$(echo $METADATAURL | cut -d'/' -f1-4)";
echo "$REDIRECT_URI?logout=$OPENAM_URL/UI/Logout" > /var/www/oidc/oidc_logout.txt;
#echo "$REDIRECT_URI?logout=$OPENAM_URL/UI/Logout" > /var/www/oidc/openam_logout.txt;

cat << EOF >> $OIDC_CONF_FILE;

OIDCScope "$SCOPE"
OIDCClientID OIDCAgent
OIDCClientSecret secret
OIDCRedirectURI $REDIRECT_URI
OIDCProviderMetadataURL $METADATAURL
OIDCClientName $CLIENT_NAME
#OIDCProviderIssuer $OPENAM_URL
#OIDCProviderAuthorizationEndpoint $OPENAM_URL/oauth2/authorize
#OIDCProviderTokenEndpoint $OPENAM_URL/oauth2/access_token
#OIDCProviderTokenEndpointAuth client_secret_post
#IDCProviderUserInfoEndpoint $OPENAM_URL/oauth2/userinfo
# Default endSession endpoint currently broken in OpenAM, also makes it a bit broken for discovery as of 31.Oct.2014 
#OIDCProviderEndSessionEndpoint $OPENAM_URL/oauth2/connect/endSession

EOF
fi

cat << EOF >> $OIDC_CONF_FILE;
<Location />
    DirectoryIndex index.php
    Authtype openid-connect
    require valid-user
</Location>
</VirtualHost>
EOF

    # Restart Apache HTTPD deamon
    a2dissite default;
    a2enmod auth_openidc;
    a2ensite oidc;

    open-port 443;
    close-port 80;
    service apache2 start;
    juju-log "done."
}

function departed() {
	juju-log "openidc-client-relation-departed on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
    relation-set CLIENT_ID="$CLIENT_ID";
}

function broken() {
	juju-log "openidc-client-relation-broken on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
    service apache2 stop;
    # Enabling the new default initial config
    a2dissite oidc;
    a2dismod auth_openidc;
    a2ensite default;
    close-port 443;
    open-port 80;
    service apache2 start;
}

cmd=$(basename "$0");
juju-log "CMD:$cmd:";
case "$cmd" in
	openidc-client-relation-changed)
        changed;
        ;;
	openidc-client-relation-departed)
        departed;
        ;;
    openidc-client-relation-joined)
		joined;
	;;
	openidc-client-relation-broken)
		broken;
	;;
esac
