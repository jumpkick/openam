#!/bin/bash -ex

. hooks/common
export TOMCAT_HOME="/var/lib/tomcat7";
export TOMCAT_CONFIG_FILE="$TOMCAT_HOME/conf/server.xml";
export KEYSTORE="$TOMCAT_HOME/conf/keystore.jks";
export KEYSTORE_PWD="changeit";
export OPENAM_HOME="$CHARM_DIR/openam";
export PUBLIC_HOSTNAME=$(unit-get public-address);

function install() {
	apt-get -y -qq install unzip default-jre tomcat7;

	ACCEPT_LICENSES=$(config-get Accept_license);
	juju-log "ACCEPT_LICENSES:$ACCEPT_LICENSES";
	if [ "${ACCEPT_LICENSES}" != "True" ]; then
		juju-log "License has to be accepted before installing."
		exit 1
	fi
    
    AMADMIN_PWD=$(config-get Amadmin_password);
    if [ -z "${AMADMIN_PWD}" ]; then
		juju-log "OpenAM amadmin password has to be set before installation can proceed."
		exit 1
	fi
    if [ ${#AMADMIN_PWD} -lt 8 ]; then
		juju-log "Administrator password must be atleast 8 characters."
		exit 1
	fi
	
	cd $CHARM_DIR;

	# Download WAR file
	wget -q $REPO_HOME/$OPENAM_WAR;
	SHA_0=$(<$CHARM_DIR/$OPENAM_WAR.sha);
	SHA_1=$(sha1sum $OPENAM_WAR | cut -d' ' -f1);
	if [ "$SHA_0" != "$SHA_1" ]; then
		juju-log "Checksum error for $OPENAM_WAR";
		exit 1;
	fi

	# Download SSOADM archive
	wget -q $REPO_HOME/$SSOADM_FILE;
	SHA_0=$(<$CHARM_DIR/$SSOADM_FILE.sha);
	SHA_1=$(sha1sum $SSOADM_FILE | cut -d' ' -f1);
	if [ "$SHA_0" != "$SHA_1" ]; then
		juju-log "Checksum error for $SSOADM_FILE";
		exit 1;
	fi

	# Download SSOCONFIGURATOR archive
	wget -q $REPO_HOME/$CONFIGURATOR_FILE;

	SHA_0=$(<$CHARM_DIR/$CONFIGURATOR_FILE.sha);
	SHA_1=$(sha1sum $CONFIGURATOR_FILE | cut -d' ' -f1);
	if [ "$SHA_0" != "$SHA_1" ]; then
		juju-log "Checksum error for $CONFIGURATOR_FILE";
		exit 1;
	fi

	# Keep original Tomcat server.xml file for later patching when config is changed.
	cp $TOMCAT_CONFIG_FILE $TOMCAT_CONFIG_FILE-org;

	if [ -f $TOMCAT_HOME/webapps/ROOT/index.html ]; then
		rm $TOMCAT_HOME/webapps/ROOT/index.html
	fi

cat << END > $TOMCAT_HOME/webapps/ROOT/index.html
<html>
<head>
<script>
var openam = "/openam";
var protocol = location.protocol.replace(/:/g,'')
var port = location.port;
var host = location.hostname;
var path = location.pathname;

if (port == "8080" && path == "/") {
     location="http://"+host+":"+port+openam;
}
if (port == "8443" && path == "/") {
     location="https://"+host+":"+port+openam;
}
</script>
</head>
</html>
END

	# To enable SSL, need to create a keystore and cert
	JAVA_HOME=$(readlink -f $(which java) | sed "s:bin/java::");
	if [ -f "$KEYSTORE" ]; then
		rm -f $KEYSTORE;
	fi
	$JAVA_HOME/bin/keytool -genkey -noprompt -trustcacerts -keyalg RSA \
		-alias tomcat -dname CN=CA -keypass $KEYSTORE_PWD -storepass $KEYSTORE_PWD -keystore $KEYSTORE

	juju-log "Preparing and deploying the OpenAM war.";

    stop;

    # Already installed ?
	if [ -d "/root/.openamcfg" ];then
    	rm -fr /root/.openamcfg;
    fi
    mkdir /root/.openamcfg;
    # Make sure the tomcat user can write to the "home" directory 
	chown -R tomcat7 /root/.openamcfg;
	juju-log "Created .openssocfg directory for OpenAM installation.";

	if [ -d "/usr/share/tomcat7/openam" ];then
    	rm -fr /usr/share/tomcat7/openam;
    fi
	mkdir /usr/share/tomcat7/openam;
    chown -R tomcat7 /usr/share/tomcat7;
    juju-log "Created default OpenAM install directory in /usr/share/tomcat7/openam";
    if [ -d $TOMCAT_HOME/webapps/openam ];then
		juju-log "Undeploying OpenAM war file."
		rm -fr $TOMCAT_HOME/webapps/openam;
	fi

    unzip -qqo $OPENAM_WAR -d $TOMCAT_HOME/webapps/openam
    chown -R tomcat7 $TOMCAT_HOME/webapps;

    start;
    
    #
    # Have to wait until Tomcat has started and OpenAM id deployed
    #
    HTTP_PORT=$(config-get http_port);

    ALIVE=0
    TRY=0
    MAX=30
    #
    # Wait until ready before Tomcat is started and ready for service
    #
    until [ ! -z "$(curl --silent --show-error --connect-timeout 1 --max-time 5 -I http://localhost:$HTTP_PORT 2>/dev/null | grep 'Coyote')" ];
    do
		TRY=$[TRY+1];
		if [ "$TRY" -eq "$MAX" ]; then
	    	break;
	 	fi
        juju-log "Wait, Tomcat is restarting....."
        sleep 10
        tail -n 1 $TOMCAT_HOME/logs/catalina.out
	done

	if [ "$TRY" -eq "$MAX" ]; then
		juju-log "OpenAM did not start within a reasoable time, aborting."
		exit 1;
	fi

#	sethostname;

    DOMAIN=$(echo "$PUBLIC_HOSTNAME" | awk -F "." '{print $(NF-1)"."$NF}');
#   DOMAIN=$(echo $PUBLIC_HOSTNAME | cut -d"." -f2-);

    juju-log "Running configurator for '$PUBLIC_HOSTNAME' with domain: '$DOMAIN'."

    AMLDAPUSERPASSWD="pa$AMADMIN_PWD";

cat << ENDCONFIG > config.conf
SERVER_URL=http://$PUBLIC_HOSTNAME:$HTTP_PORT
DEPLOYMENT_URI=/openam
BASE_DIR=/usr/share/tomcat7/openam
locale=en_US
PLATFORM_LOCALE=en_US
AM_ENC_KEY=1234567890
ADMIN_PWD=$AMADMIN_PWD
AMLDAPUSERPASSWD=$AMLDAPUSERPASSWD
COOKIE_DOMAIN=.$DOMAIN
#
DATA_STORE=embedded
DIRECTORY_SSL=SIMPLE
DIRECTORY_SERVER=localhost
DIRECTORY_PORT=50389
DIRECTORY_ADMIN_PORT=4444
DIRECTORY_JMX_PORT=1689
ROOT_SUFFIX=dc=example,dc=com
DS_DIRMGRDN=cn=Directory Manager
DS_DIRMGRPASSWD=secret12
ACCEPT_LICENSES=true
ENDCONFIG

	unzip -qqo $CONFIGURATOR_FILE;
	if [ ! -f "tool.jar" ]; then
		ln -s openam-configurator-tool*.jar tool.jar;
	fi
	
	java -jar tool.jar -f ./config.conf;
	juju-log "Done deploying OpenAM in Tomcat."
}

#
# If the config params Tomcat port or the JAVA_OPTS is the only changes, there
# is no need to do a complete reinstall of OpenAM.
#
function config-changed() {
	
	# If amadmin password is changed, just ignore. The initial will be used.
	AMADMIN_PWD=$(config-get Amadmin_password);
	OLD_PWD="";
	if [ -f $PWDFILE ]; then
    	OLD_PWD=$(<$PWDFILE);
    fi
	juju-log "OLD_PWD:'$OLD_PWD', AMADMIN_PWD:'$AMADMIN_PWD'";
	if [ -z "$OLD_PWD" -o "$OLD_PWD" != "$AMADMIN_PWD" ]; then
    	juju-log "Changing the amdadmin password after installation is not supportted";
    	config-set Amadmin_password="$OLD_PWD";
    fi
	
#    sethostname;

	if [ -z $(echo $PUBLIC_HOSTNAME | sed 's/\.//g' | sed 's/[0-9]//g') ]; then
		juju-log "OpenAM needs a FQDN to be installed. Can not use pure IP: $PUBLIC_HOSTNAME";
		exit 1;
	fi
    
    HTTP_PORT=$(config-get http_port);
    HTTPS_PORT=$(config-get https_port);
    
    OPENAM_ADMIN="amadmin";
    OPENAM_URL="http://$PUBLIC_HOSTNAME:$HTTP_PORT";
    OPENAM_DEPLOYMENT_URI="/openam";
    
    #
    # Tomcat updated configuration

    cp $TOMCAT_CONFIG_FILE-org $TOMCAT_CONFIG_FILE
    
    #http_port
    OLD_PORT=$(grep -i "Connector port=\"" $TOMCAT_CONFIG_FILE | grep -v "SSL" | grep -v "AJP" | cut -d'"' -f2);
    OLD_SSL_PORT=$(grep -i "Connector port=\"" $TOMCAT_CONFIG_FILE | grep "SSL" | grep -v "AJP" | cut -d'"' -f2);
    close-port ${OLD_PORT};
    close-port ${OLD_SSL_PORT};

    sed -i -e "s/port=\"8080\"/port=\"$HTTP_PORT\"/g" $TOMCAT_CONFIG_FILE;
    sed -i -e "s/port=\"8080\"/port=\"$HTTP_PORT\"/g" $TOMCAT_HOME/webapps/ROOT/index.html;

    # HTTPS configuration of Tomcat/OpenAM as standalone
    sed -i -e "s/ort=\"8443\"/ort=\"$HTTPS_PORT\"/g" $TOMCAT_CONFIG_FILE;
    sed -i -e "s/ort=\"8443\"/ort=\"$HTTPS_PORT\"/g" $TOMCAT_HOME/webapps/ROOT/index.html;
    KEYSTORE_FILE_Q=$(echo $KEYSTORE | sed 's,/,\\/,g');
    sed -i -e "s/sslProtocol=\"TLS\"/sslProtocol=\"TLS\" keystoreFile=\"$KEYSTORE_FILE_Q\" keystorePass=\"$KEYSTORE_PWD\"/g" $TOMCAT_CONFIG_FILE;

{
ed -s $TOMCAT_CONFIG_FILE <<EOF
/SSLEnabled="true"
-1d
/\/>
+1d
wq
EOF
} &>/dev/null 

	open-port ${HTTP_PORT};
	open-port ${HTTPS_PORT};
	juju-log "Opened default port:$HTTP_PORT and SSL port:$HTTPS_PORT used by Tomcat/Openam.";

	#java_opts
	JAVA_ARGS=$(config-get java_opts);

	# If file exists, OpenAM has been fully deployed earlier.
	if [ -f /usr/share/tomcat7/bin/setenv.sh ]; then
    	rm /usr/share/tomcat7/bin/setenv.sh
	fi
	# Replace it anyway, tomcat will be restarted
    echo "JAVA_OPTS=\"$JAVA_ARGS\"" >>  /usr/share/tomcat7/bin/setenv.sh
	juju-log "JAVA_OPTS is set to: $JAVA_ARGS";

	HOST_ALIAS=$(config-get FQDN_server_alias);
	# Need to add a host alias ?, if using the default EC2 etc. generated one make cookies hostbased.
	if [ ! -z "$HOST_ALIAS" ]; then
		$SSOADM update-server-cfg \
			--servername default \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues com.sun.identity.server.fqdnMap[$HOST_ALIAS]=$HOST_ALIAS;
		juju-log "Added $HOST_ALIAS to the map of supported FQDN aliases along with $PUBLIC_HOSTNAME."

    	DOMAIN=$(echo "$PUBLIC_HOSTNAME" | awk -F "." '{print $(NF-1)"."$NF}');

		$SSOADM set-realm-attrs \
			--realm / \
			--servicename sunIdentityRepositoryService \
			--adminid amadmin \
			--password-file $PWDFILE \
			--append \
			--attributevalues sunOrganizationAliases=$DOMAIN;

    	juju-log "Adding cookie domain: .$DOMAIN"
		$SSOADM set-attr-defs \
			--servicename iPlanetAMPlatformService \
			--schematype global \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues "iplanet-am-platform-cookie-domains=.$DOMAIN";

    	DOMAIN=$(echo "$HOST_ALIAS" | awk -F "." '{print $(NF-1)"."$NF}');
    	juju-log "Adding cookie domain: .$DOMAIN"
		$SSOADM set-attr-defs \
			--servicename iPlanetAMPlatformService \
			--schematype global \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues "iplanet-am-platform-cookie-domains=.$DOMAIN";
		juju-log "Added $HOST_ALIAS to the map of supported FQDN aliases along with $PUBLIC_HOSTNAME."
	else
		$SSOADM set-attr-defs \
			--servicename iPlanetAMPlatformService \
			--schematype global \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues "iplanet-am-platform-cookie-domains=";
		juju-log "OpenAM domain cookies cleared.";
	fi
	juju-log "OpenAM configurator completed.";
}

function install-ssoadm() {
	AMADMIN_PWD=$(config-get Amadmin_password);
	export JAVA_HOME=$(readlink -f $(which java) | sed "s:bin/java::");
	if [ -d $CHARM_DIR/ssoadm ]; then
		juju-log "SSOADM already installed.";
		echo "$AMADMIN_PWD" > $PWDFILE;
        chmod 400 $PWDFILE;
		return; 
	fi
	mkdir -p $CHARM_DIR/ssoadm;
	cd $CHARM_DIR/ssoadm;

    echo "$AMADMIN_PWD" > $PWDFILE;
    chmod 400 $PWDFILE;
    #
    # Have to wait until Tomcat has started and OpenAM id deployed
    #
    ALIVE=0
    TRY=0
    MAX=30

	until [ ! -z "$(curl --silent --show-error --connect-timeout 1 --max-time 5 -I http://localhost:$HTTP_PORT 2>/dev/null | grep 'Coyote')" ];
	do
		TRY=$[TRY+1];
		if [ "$TRY" -eq "$MAX" ]; then
			break;
		fi
		juju-log "Wait, Tomcat is restarting.....";
		sleep 10;
		tail -n 1 "$TOMCAT_HOME/logs/catalina.out";
	done

	#
	# Installing SSOAM
	#
	unzip -qqo ../$SSOADM_FILE;
	#
	if [ -f "/usr/share/tomcat7/openam/bootstrap" ]; then
		juju-log "Installing SSOADM in '$CHARM_DIR/ssoadm'."
		chmod 755 /usr/share/tomcat7/openam/bootstrap;
		if [ $OPENAM_RELEASE_N -gt 1102 ]; then
			./setup --acceptLicense --path /usr/share/tomcat7/openam -d $CHARM_DIR/ssoadm/ssoadm-debug -l $CHARM_DIR/ssoadm/ssoadm-log;
    	else
    		./setup --path /usr/share/tomcat7/openam -d $CHARM_DIR/ssoadm/ssoadm-debug -l $CHARM_DIR/ssoadm/ssoadm-log;
    	fi
		juju-log "SSOADM installed."
	else
		juju-log --log-level ERROR "OpenAM bootstrap not found !!!!"
	fi
	juju-log "done."
}

#function sethostname() {
#	PUBLIC_ADDRESS=$(unit-get public-address);
#	HOST_ALIAS=$(config-get FQDN_server_alias);
	#
	# If the user has entered a FQDN to be used as the hostname for this server use that as default.
	# 
 #   if [ ! -z $HOST_ALIAS ]; then
 #       PUBLIC_HOSTNAME="$HOST_ALIAS";
 #       if [ ! -z "$(nslookup -timeout=2 $PUBLIC_HOSTNAME | grep '** server can')" ]; then
 #       	# If it does not resolve, add it to the local hostfile, assuming a local mapping is in place.
 #           if [ -z $(grep "$PUBLIC_HOSTNAME" /etc/hosts) ]; then
 #               echo "127.0.0.1 $PUBLIC_HOSTNAME" >> /etc/hosts;
 #           fi
 #       fi
 #  	else
 #       PUBLIC_HOSTNAME="$PUBLIC_ADDRESS";
# 	fi
# 	PUBLIC_HOSTNAME="$PUBLIC_ADDRESS";
#}

function tomcatObtainTomcatLock() {
	(umask 0077; touch /etc/tomcat7/tomcat.lock)
	exec 9> /etc/tomcat7/tomcat.lock; flock 9;
}

function tomcatReleaseTomcatLock() {
	exec 9>&-
}

function start() {
	service tomcat7 start;
	juju-log "tomcat7 starting."
}

function stop() {
	service tomcat7 stop;
	juju-log "tomcat7 shuting down."
}

function noXUI() {
	if [ $OPENAM_RELEASE_N -gt 1102 ]; then
		$SSOADM set-attr-defs \
			--servicename iPlanetAMAuthService \
			--schematype Global \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues openam-xui-interface-enabled=false;
			juju-log "OpenAM XUI is turned 'off'";
	fi
}

function yesXUI() {
	if [ $OPENAM_RELEASE_N -gt 1102 ]; then
		$SSOADM set-attr-defs \
			--servicename iPlanetAMAuthService \
			--schematype Global \
			--adminid amadmin \
			--password-file $PWDFILE \
			--attributevalues openam-xui-interface-enabled=true;
		juju-log "OpenAM XUI is turned 'on'";
	fi
}

cmd=$(basename "$0")
case "$cmd" in
	config-changed | upgrade-charm)
        config-changed;
        stop;
        start;
        ;;
	install)
        install;
        install-ssoadm;
        noXUI;
        ;;
    start)
		start;
		;;
	stop)
		stop;
		;;
esac
