#!/bin/bash -ex
. hooks/common
CLIENT_SECRET="secret";
CLIENT_ID="OIDCAgent";
AGENT_TYPE="OAuth2Client";

function joined() {
	juju-log "openidc-discover-relation-joined invoked on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
#	relation-set openam_url="https://$(unit-get public-address):$(config-get https_port)/openam";
	relation-set metadataURL="https://$(unit-get public-address):$(config-get https_port)/openam/.well-known/openid-configuration";
#	relation-set client_id="$CLIENT_ID";
}

function changed() {
	juju-log "openidc-discover-relation-changed invoked on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
	REDIRECT_URI=$(relation-get redirect_uri);
    if [ -z "$REDIRECT_URI" ]; then
    	return;
    fi

    CLIENT_ID=$(relation-get client_id);
#    AGENT_TYPE=$(relation-get agent_type);

# Export policy
# /opt/demo/openam/ssoadm/openam/bin/ssoadm list-policies --realm / --adminid amadmin --password-file /opt/demo/openam/ssoadm/pwd.txt --policynames OAuth2ProviderPolicy --outfile oidc-policy.xml-org -v
# https://$HOSTNAME_PREFIX-am.openrock.org/openam

RESOURCE_ENDPOINT="https://$(unit-get public-address):$(config-get http_port)/openam/oauth2/authorize?*";
juju-log "RESOURCE_ENDPOINT:$RESOURCE_ENDPOINT"
cat << EOF > $CHARM_DIR/oidc-policies.xml
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE Policies PUBLIC "-//OpenSSO Policy Administration DTD//EN" "jar://com/sun/identity/policy/policyAdmin.dtd">
<Policies>
<Policy name="OIDCOAuth2ProviderPolicy" referralPolicy="false" active="true" >
<Rule name="OAuth2ProviderRule">
<ServiceName name="iPlanetAMWebAgentService" />
<ResourceName name="$RESOURCE_ENDPOINT" />
<AttributeValuePair>
<Attribute name="POST" />
<Value>allow</Value>
</AttributeValuePair>
<AttributeValuePair>
<Attribute name="GET" />
<Value>allow</Value>
</AttributeValuePair>
</Rule>
<Subjects name="Subjects:1405436095789LSBpVk0=" description="">
<Subject name="OAuth2ProviderSubject" type="AuthenticatedUsers" includeType="inclusive">
</Subject>
</Subjects>
</Policy>
</Policies>
EOF


cat << EOF > ssoadm-batch

# Create the service in the demo realm with default attributes
add-svc-realm \
	--verbose \
	--realm $OPENAM_REALM \
	--servicename OAuth2Provider \
    --adminid $OPENAM_ADMIN \
    --password-file $PWDFILE \
    --attributevalues \
	"forgerock-oauth2-provider-authorization-code-lifetime=60" \
	"forgerock-oauth2-provider-issue-refresh-token=false" \
	"forgerock-oauth2-provider-scope-implementation-class=org.forgerock.openam.oauth2.provider.impl.ScopeImpl" \
	"forgerock-oauth2-provider-refresh-token-lifetime=60000000" \
	"forgerock-oauth2-provider-access-token-lifetime=6000000"

# Create the OIDC/OAuth2 Agent
create-agent \
	--verbose \
	--agentname $CLIENT_ID \
	--agenttype $AGENT_TYPE \
	--realm $OPENAM_REALM \
  	--adminid $OPENAM_ADMIN \
  	--password-file $PWDFILE \
  	--attributevalues \
  	"com.forgerock.openam.oauth2provider.responseTypes[0]=code" \
	"com.forgerock.openam.oauth2provider.responseTypes[1]=token" \
	"com.forgerock.openam.oauth2provider.responseTypes[2]=id_token" \
	"com.forgerock.openam.oauth2provider.responseTypes[3]=code token" \
	"com.forgerock.openam.oauth2provider.responseTypes[4]=token id_token" \
	"com.forgerock.openam.oauth2provider.responseTypes[5]=code id_token" \
	"com.forgerock.openam.oauth2provider.responseTypes[6]=code token id_token" \
	"com.forgerock.openam.oauth2provider.description[0]=" \
	"com.forgerock.openam.oauth2provider.contacts[0]=" \
  	"com.forgerock.openam.oauth2provider.redirectionURIs[0]=$REDIRECT_URI" \
	"sunIdentityServerDeviceStatus=Active" \
	"userpassword=$CLIENT_SECRET" \
	"com.forgerock.openam.oauth2provider.defaultScopes[0]=" \
	"com.forgerock.openam.oauth2provider.scopes[0]=openid|OIDC" \
	"com.forgerock.openam.oauth2provider.scopes[1]=email|Email" \
	"com.forgerock.openam.oauth2provider.scopes[2]=profile|Profile" \
	"com.forgerock.openam.oauth2provider.clientType=Confidential" \
	"com.forgerock.openam.oauth2provider.idTokenSignedResponseAlg=HS256" \
	"com.forgerock.openam.oauth2provider.name[0]=OIDC Apache module"

create-policies --realm / --adminid ${OPENAM_ADMIN} --password-file ${PWDFILE} --xmlfile $CHARM_DIR/oidc-policies.xml
EOF
	$SSOADM do-batch -u amadmin --password-file ${PWDFILE}  -Z ssoadm-batch --batchstatus batch-status-file --continue;
	juju-log "Done."
}

function departed() {
	juju-log "openidc-discover-relation-departed invoked on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
	CLIENT_ID=$(relation-get CLIENT_ID);
cat << EOF > ssoadm-batch
remove-svc-realm \
	--verbose \
	--realm $OPENAM_REALM \
	--servicename OAuth2Provider \
    --adminid $OPENAM_ADMIN \
    --password-file $PWDFILE

    # Delete the agent if present
delete-agents \
	--verbose \
	--agentnames $CLIENT_ID \
	--realm $OPENAM_REALM \
    --adminid $OPENAM_ADMIN \
    --password-file $PWDFILE

    # Delete the policy
delete-policies \
	--realm / \
	--adminid ${OPENAM_ADMIN} \
	--password-file ${PWDFILE} \
	--policynames OIDCOAuth2ProviderPolicy
EOF
	$SSOADM do-batch -u amadmin --password-file ${PWDFILE}  -Z ssoadm-batch --batchstatus batch-status-file --continue;
	juju-log "Done."
}

function broken() {
	juju-log "openidc-discover-relation-broken invoked on $JUJU_UNIT_NAME invoked $JUJU_REMOTE_UNIT";
	# Delete service if already present
}

cmd=$(basename "$0")
juju-log "CMD:$cmd:";
case "$cmd" in
	openidc-discovery-relation-changed)
        changed;
        ;;
	openidc-discovery-relation-departed)
        departed;
        ;;
    openidc-discovery-relation-joined)
		joined;
		;;
	openidc-discovery-relation-broken)
		broken;
		;;
esac
